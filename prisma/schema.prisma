// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}
enum status {
  Pendente
  Recusado
  Aceite
}

model User {
  id        String            @id @default(uuid())
  email     String            @unique
  password  String
  contact  String?
  role      Role              @default(USER)
  token     String?           @unique
  profile   Profile?
  Post      Post[]
  requests  RequestResidue[]  
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("users")
}
model Profile {
  id         String   @id @default(uuid())
   name String 
  image      String?
  evaluation Int?
  locationId String? @unique
  location   Location? @relation(fields: [locationId], references: [id])
  userId     String?  @unique
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("profiles")
}

model Post {
  id          String           @id @default(uuid())
  image       String?
  price       Decimal
  quantity    Decimal
  description String?
  location  String ?
  user        User?            @relation(fields: [userId], references: [id])
  userId      String?
  // residue     Residue          @relation(fields: [residueId], references: [id])
  residue String
  residueId   String
  requests    RequestResidue[] 

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("posts")
}
model Residue {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("residues")
}


model Location {
  id String  @id @default(uuid())
  profile Profile?
  district  District?
  neighborhood  Neighborhood?
  createdAt DateTime @default(now()) 
  updatedAt DateTime  @updatedAt 

  @@map("locations")
}


model Province{
  id String  @id @default(uuid())
  name String  @unique
  district  District[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime  @updatedAt 
  @@map("provinces")

}

model District{
  id String  @id @default(uuid())
  province Province @relation(fields: [provinceId],references: [id],onDelete: Cascade)
   provinceId String
  location Location @relation(fields: [locationId],references: [id],onDelete: Cascade)
   locationId String @unique
  neighborhood Neighborhood[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime  @updatedAt 
  
  @@map("districts")


}


model Neighborhood {
  id String  @id @default(uuid())
  name String  @unique
  district District @relation(fields: [districtId],references: [id],onDelete: Cascade)
  districtId String
  location Location @relation(fields: [locationId],references: [id],onDelete: Cascade)
  locationId String @unique
  createdAt DateTime @default(now()) 
  updatedAt DateTime  @updatedAt 
  
  @@map("neighborhoods")
}



model RequestResidue {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    status   @default(Pendente)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("requestResidue")
}


